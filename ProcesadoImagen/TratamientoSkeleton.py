# -*- coding: utf-8 -*-
"""TratamientoSkeleton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UmS7W-fvGkWMP3hreWeE39CwpDBv_xMt
"""

import cv2

from matplotlib import cm
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

from skimage import data,io,color,util
from skimage.filters import threshold_otsu
from skimage.segmentation import clear_border
from skimage.measure import label, regionprops
from skimage.color import label2rgb,rgb2labdef
from skimage.feature import canny
from skimage.util import invert
from skimage.morphology import closing, opening, erosion, dilation, square, skeletonize,skeletonize_3d
from skimage.io import imread, imshow
from skimage.transform import (hough_line, hough_line_peaks,probabilistic_hough_line)


from scipy import ndimage
from scipy.spatial import distance

import numpy as np
from PIL import Image

import math

class TratamientoSkeleton():
  
  @classmethod
  def detectar_ojo(self,frame):  
    img_gray= cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) #Convertir a HSV

    #array con las posiciones min - max
    lower=np.array([0,0,0])
    upper=np.array([255,255,170])

    #Deteccion de colores
    mask = cv2.inRange(hsv, lower, upper)

    #Erosion de la imagen
    kernel = np.ones((6,6),np.uint8) 
    Erosion = cv2.erode(mask,kernel,iterations = 1)

    muestra_imagenes([frame,img_gray,mask,Erosion],True)

    return Erosion
  
  @classmethod
  def detectar_region(self,im):
    centro_region=[]
    area_region=[]
    # eliminacio de  artefactos conectados al borde de la imagen
    cleared = clear_border(im)

    # etiqueta de la region de la imagen
    label_image = label(cleared)
    image_label_overlay = label2rgb(label_image, im)

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.imshow(image_label_overlay)

    for region in regionprops(label_image):
        area_region.append(region.area)
        # Tamaño escogido para las areas que queremos seleccionar
        if region.area >= 5:
            # Dibujo de los segmentos usando los valores de minr, minc, maxr, maxc
            minr, minc, maxr, maxc = region.bbox
            #Localiza las coordenads del centro de la región
            print('Coordenadas de la región:')
            centro_region.append([(minr+(maxr-minr)/2),(minc+(maxc-minc)/2)])
            print('minr:',minr,'\nminc:',minc,'\nmaxr:', maxr,'\nmaxc:', maxc)
            print('______________________________________________________')
            rect = mpatches.Rectangle((minc, minr), maxc - minc, maxr - minr,
                                      fill=False, edgecolor='red', linewidth=3)
            ax.add_patch(rect)

    ax.set_axis_off()
    plt.tight_layout()
    plt.show()
    return centro_region,area_region
  
  @classmethod
  
  
  
  @classmethod
  
  
  
  @classmethod
