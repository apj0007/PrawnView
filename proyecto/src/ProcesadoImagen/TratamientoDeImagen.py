# -*- coding: utf-8 -*-
"""TratamientoDeImagen.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bsWnvvnI84M1_74kIXj5g5f-CMkVCYVS
"""

import cv2

from scipy import ndimage
from scipy.spatial import distance

import numpy as np
from PIL import Image

import math
import matplotlib.pyplot as plt 

from skimage.util import invert
from skimage.morphology import closing, opening, erosion, dilation
from skimage.morphology import square
from skimage.io import imread, imshow
from skimage.filters import threshold_otsu
from skimage import io,color,util
from skimage.morphology import skeletonize,skeletonize_3d
from skimage.color import rgb2lab

class TratamientoDeImagen():
    """
    Clase que contiene las clases para leer una imagen y mostrarla por pantalla     en grande o en pequeÃ±o.
    
    @author: AndrÃ©s PÃ©rez JuÃ¡rez
    @version: 1.3
    """
    
    @classmethod
    def erosionar(self,grey): 
      kernel = np.ones((5,5), np.uint8)
      img_erosion = cv2.erode(grey, kernel, iterations=1) 
      return img_erosion

    @classmethod
    def elimina_ruido(self,grey):
      greym = ndimage.gaussian_filter(grey, 2)
      return greym
    
    @classmethod
    def escala_grises(self,img):
      img = color.rgb2gray(img)
      img_gris=self.elimina_ruido(img)
      return img_gris
    
    @classmethod

    #Comparar contra colores de fondo
    #lo que fuese fondo sería oscuro en la imagen de salida
    
    def escala_grises3(self,img,color): 
      img=self.elimina_ruido(img)
      imagenLab = rgb2lab(img)
      colorLab = self.pixelRGB2LAB(color)
      img_gris = abs(imagenLab-color).mean(axis=2)/255
      
      return img_gris
    
    @classmethod
    def op_morfologicas(self,im):
      im = dilation(im, square(12))
      im1 = opening(im, square(25))  
      im2 = erosion(im1, square(8))
      return im2
    
    #Si se desea imprimir la imagen se debe enviar True
    @classmethod
    def binarizar(self,gray):
      thresh = threshold_otsu(gray)
      binary = gray > thresh
      rbinary=self.op_morfologicas(binary)
      return rbinary
    
    @classmethod
    def invertirbinarizar1(self,binary):
      inbin = util.invert(binary)
      return inbin

    @classmethod
    #Si deseamos enviar la imagen binaria sin invertir se pone binary a True
    def skeleton(self,data):
      data = invert(data) 
      skeleton3d = skeletonize_3d(data)
      skeleton3d = dilation(skeleton3d, square(3))
      return skeleton3d
    '''
    Función que transforma un número en base 255 en otro en base 1.
    '''
    @classmethod
    def base1(self,num):
        valorEnBase255 = num
        valorEnBase1 = (valorEnBase255/255)*1
        return valorEnBase1

    '''
    Función para pasar un pixel de RGB a CIELAB

    CIELAB es más apropiado para hacer diferencia de colores
    '''
    @classmethod
    def pixelRGB2LAB(self,pixel):
        r,g,b = pixel # pixel es una lista con 3 valores, los puedo guardar en 3 variables asi
        rBase1 = self.base1(r)
        gBase1 = self.base1(g)
        bBase1 = self.base1(b)


        # rgb2lab espera una lista3D, así que le paso el pixel dentro 
        # de una lista de listas y para sacarlo igual.
        return rgb2lab([[[rBase1,gBase1,bBase1]]])[0][0]
