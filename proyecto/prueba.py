# sudo apt install python-pyqt5
# https://pythonspot.com/category/pyqt5/

# La aplicacion podría ir por pestañas
# https://pythonspot.com/pyqt5-tabs/

# imagen
# https://pythonspot.com/category/pyqt5/page/3/

'''
Poner el pruebas de en el nivel de scr,
para cargar las dos imagenes de segmentación con matplotlib 

poster template A0



'''

import numpy as np
from PIL.ImageQt import ImageQt
from skimage.io import imread
from skimage import io
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

#------------------------------------------------------------------------------------------------------------

# -*- coding: utf-8 -*-
"""FachadaCaracterísticas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UmS7W-fvGkWMP3hreWeE39CwpDBv_xMt
"""


from src.ProcesadoImagen.LeeImagen import LeeImagen
from src.ProcesadoImagen.TratamientoDeImagen import TratamientoDeImagen
from src.ProcesadoImagen.ProcesadorImagenAutomatico import ProcesadorImagenAutomatico
from src.ProcesadoImagen.TratamientoRegiones import TratamientoRegiones
from src.ProcesadoImagen.CuencaHidrografica import CuencaHidrografica

class FachadaCaracteristicas():
    """
    Clase fachada para el mediador que se encargara de la entrada salida por ficheros.
    @var mediador: Instancia del mediador de pestañas que crea dicha fachada.
    @var escribecsv: Instancia de la clase que pasa a csv los datos o los lee de dicho fichero.
    @var dic: Diccionario de datos donde estalocalizado los string del codigo.
    @var configuraciontoxml: Instancia de la clase que lee y escribe los xml.
    @var estad: Instancia de la clase que se encarga de lasestadisticas.   
    """

    def __init__(self):
      """
      Constructor de la clase FachadaEntradaSalida que inicializa y prepara todos
      los objetos que tendremos que usar mas adelante en la clase.
      """
      self.pr_ProcesadorImagenAutomatico=ProcesadorImagenAutomatico()
      self.pr_LeeImagen=LeeImagen()
      self.pr_TratamientoDeImagen=TratamientoDeImagen()
      self.pr_TratamientoRegiones=TratamientoRegiones()
      self.pr_CuencaHidrografica=CuencaHidrografica()
    
    @classmethod
    def devolverBinario(self,path):
      self.pr_LeeImagen=LeeImagen()
      self.pr_TratamientoDeImagen=TratamientoDeImagen()
      print('PPPPPPPPPPPPPPPPPPPPPPPPPPPPPP',path)
      img=self.pr_LeeImagen.leer_imagen(path)
      gray=self.pr_TratamientoDeImagen.escala_grises3(img,[247,211,114])
      binary=self.pr_TratamientoDeImagen.binarizar(gray)
      return binary
  
    
    @classmethod
    def devolverMelanosis(self,img):
      self.pr_TratamientoRegiones=TratamientoRegiones()
    
      mel=self.pr_TratamientoRegiones.detectar_ojo(img)
        
      return mel

    @classmethod
    def devolverSkeleton(self,binary):
      self.pr_TratamientoDeImagen=TratamientoDeImagen()
    
      sk=self.pr_TratamientoDeImagen.skeleton(binary)
        
      return sk


    @classmethod
    def devolverSegmentos(self,image,binary):
      self.pr_CuencaHidrografica=CuencaHidrografica()
      im,seg=CuencaHidrografica.cuenca(image,binary)
      return im
      #return im,seg
   
    
    @classmethod
    def devolverAreasRatio(self,path,binary):
      self.pr_ProcesadorImagenAutomatico=ProcesadorImagenAutomatico()
    
      areag,aream=ProcesadorImagenAutomatico.ProcesadorAutomatico(path,binary)
        
      ratio=aream/areag
    
      return areag,aream,ratio



#------------------------------------------------------------------------------------------------------------

class Mediator:
    def __init__(self,parent):
        self.fachada = FachadaCaracteristicas()
        self.parent=parent
        
    
    def registra_boton_carga(self,boton_carga,label1,label2,label3,label4,label5):
        self.boton_carga = boton_carga
        self.label1=label1
        self.label2=label2
        self.label3=label3
        self.label4=label4
        self.label5=label5
        self.boton_carga.triggered.connect(self.carga)


    def registra_info_text(self,info_text):
        self.info_text = info_text

    def segmenta(self):
        print('Segmenta')
        self.info_text.setText("Segmentado")

    def carga(self):
        print('Carga imagen')
        pixmap,_= QFileDialog.getOpenFileName(self.parent,"QFileDialog.getOpenFileName()", "","All Files (*)",'/home')
        
        imagePath = QFileDialog.getOpenFileName(self.parent,"QFileDialog.getOpenFileName()", "","All Files (*)",'/home')[0]
        print('lololololol',pixmap)
        pixmap = QPixmap(pixmap)
        self.label1.setPixmap(pixmap)    

        binary=self.fachada.devolverBinario(imagePath)
        im = QImage(binary, 200, 200, QImage.Format_Mono)
        im2=QPixmap.fromImage(im)
        
        self.label2.setPixmap(QPixmap('/media/andres/TOSHIBA EXT/PrawnView/proyecto/1_2.jpg'))

        segmenta=self.fachada.devolverSegmentos(pixmap,binary)
        self.label3.setPixmap(segmenta) 

        melanosis=self.fachada.devolverMelanosis(pixmap)
        self.label4.setPixmap(melanosis) 

        skeleton=self.fachada.devolverSkeleton(binary)
        self.label5.setPixmap(skeleton) 
  




    def ayuda(self,boton_ayuda):
        print("aaaayuda")
        

 
 

class App(QMainWindow):
 
    def __init__(self):
        super().__init__()
        self.title = 'PrawnView'
        self.left = 10
        self.top = 10
        self.width = 640
        self.height = 400
        self.initUI()
        
        




 
    def initUI(self):
        self.mediator = Mediator(self)
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)
        self.label = QLabel(self)
        self.label_ayuda = QLabel(self)
        self.labelLogo = QLabel(self)
    
        self.table_widget = MyTableWidget(self)
        self.setCentralWidget(self.table_widget)
	
        mainMenu = self.menuBar() 

        fileMenu = mainMenu.addMenu('Archivo')
        toolsMenu = mainMenu.addMenu('Procesado de imagen')
        helpMenu = mainMenu.addMenu('Ayuda')
 
        exitButton = QAction(QIcon('exit24.png'), 'Salir', self)
        exitButton.setShortcut('Ctrl+Q')
        exitButton.setStatusTip('Salir de la aplicación')
        exitButton.triggered.connect(self.close)
        
	#QAction (String, parent)
        openButton = QAction('Abrir', self)
        openButton.setShortcut('Ctrl+O')
        openButton.setStatusTip('Abrir Imagen')


        segmentaButton = QAction('Segmentar', self)
        segmentaButton.setShortcut('Ctrl+S')
        segmentaButton.setStatusTip('Segmentar Imagen')

        ratioButton = QAction('Cantidad de melanosis', self)
        ratioButton.setShortcut('Ctrl+m')
        ratioButton.setStatusTip('Calcula el ratio de melanosis')

        
        skeletonButton = QAction('Skeleton', self)
        skeletonButton.setShortcut('Ctrl+k')
        skeletonButton.setStatusTip('Muestra Skeleton')

        ayudaAcercade = QAction('Acerca de', self)
        ayudaAcercade.setStatusTip('PrawnView')

        

        

        fileMenu.addAction(exitButton)
        fileMenu.addAction(openButton)

        toolsMenu.addAction(segmentaButton)
        toolsMenu.addAction(ratioButton)
        toolsMenu.addAction(skeletonButton)
        helpMenu.addAction(ayudaAcercade)

       
        
        # Create widget
        # Create textbox


        
        self.mediator.registra_boton_carga(openButton,self.table_widget.labeltab1,
self.table_widget.labeltab2,self.table_widget.labeltab3,
self.table_widget.labeltab4,self.table_widget.labeltab5)


        self.mediator.ayuda(ayudaAcercade)
        
        
        self.show()

class MyTableWidget(QWidget):        
 
    def __init__(self, parent):   
        super(QWidget, self).__init__(parent)
        self.layout = QVBoxLayout(self)
 
        # Initialize tab screen
        self.tabs = QTabWidget()
        self.tab1 = QWidget()	
        self.tab2 = QWidget()
        self.tab3 = QWidget()	
        self.tab4 = QWidget()
        self.tab5 = QWidget()
        self.tabs.resize(300,200) 
        self.labeltab1 = QLabel(self)
        #self.labeltab1.resize(200, 200)  
        self.labeltab2 = QLabel(self)
        self.labeltab3 = QLabel(self)
        self.labeltab4 = QLabel(self)
        self.labeltab5 = QLabel(self)
        self.textbox = QLineEdit(self)
        self.textbox.move(0, 350)
        self.textbox.resize(280,200)
        self.mediator = Mediator(self)
 
        # Add tabs
        self.tabs.addTab(self.tab1,"Imagen original")
        self.tabs.addTab(self.tab2,"Imagen binaria")
        self.tabs.addTab(self.tab3,"Segmentada")
        self.tabs.addTab(self.tab4,"Melanosis")
        self.tabs.addTab(self.tab5,"Skeleton")

 
        # Create first tab
        self.tab1.layout = QVBoxLayout(self)       
        #self.pushButton1 = QPushButton("Abrir imagen")
        #self.tab1.layout.addWidget(self.pushButton1)
        self.tab1.layout.addWidget(self.labeltab1)
        self.labeltab1.setAlignment(Qt.AlignCenter)
        #self.mediator.registra_boton_carga(self.pushButton1,self.labeltab1)
        #self.labeltab1.resize(200, 200)  
        #self.labeltab1.setScaledContents(True);
        #self.labeltab1.move(240,100)

        self.tab1.setLayout(self.tab1.layout)


        # Add tabs to widget        
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)

        # Create second tab
        self.tab2.layout = QVBoxLayout(self)
        self.tab2.layout.addWidget(self.labeltab2)
        self.labeltab2.setAlignment(Qt.AlignCenter)
        self.tab2.setLayout(self.tab2.layout)
 
        # Add tabs to widget        
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)

        # Create first tab
        self.tab3.layout = QVBoxLayout(self)
        self.tab3.layout.addWidget(self.labeltab3)
        self.labeltab3.setAlignment(Qt.AlignCenter)
        self.tab3.setLayout(self.tab3.layout)

        # Add tabs to widget        
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)

        # Create second tab
        self.tab4.layout = QVBoxLayout(self)
        self.tab4.layout.addWidget(self.labeltab4)
        self.labeltab4.setAlignment(Qt.AlignCenter)
        self.tab4.layout.addWidget(self.textbox)
        
        self.mediator.registra_info_text(self.textbox)
        self.mediator.segmenta()
        self.tab4.setLayout(self.tab4.layout)
 
        # Add tabs to widget        
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)

        # Create second tab
        self.tab5.layout = QVBoxLayout(self)
        self.tab5.layout.addWidget(self.labeltab5)
        self.labeltab5.setAlignment(Qt.AlignCenter)
        self.tab5.setLayout(self.tab5.layout)
 
        # Add tabs to widget        
        self.layout.addWidget(self.tabs)
        self.setLayout(self.layout)
 
        


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
